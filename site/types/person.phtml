<!-- person.phtml -->

<?php
$prefixes = '
PREFIX cpd: <' . $this->namespaces["cpd"] . '>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> ';

/*
Forenames
*/
$forenamesQuery = $prefixes . 'SELECT *
WHERE {
	<' . $this->resourceUri . '> cpd:hasName ?resourceUri .
	OPTIONAL { ?resourceUri cpd:forenamePosition ?date . }
	OPTIONAL { ?resourceUri cpd:isFirstName ?date . }
} ORDER BY ?forenamePosition';
$forenames = $this->querylist( $forenamesQuery, 'local/items/resource.phtml' );

/*
Birth & Death
*/
$birthDeathQuery = $prefixes . 'SELECT *
WHERE {
	<' . $this->resourceUri . '> cpd:hasPeriod ?resourceUri .
	?resourceUri rdf:type ?classTypeof .
	{ ?resourceUri rdf:type cpd:Birth . }
	UNION
	{ ?resourceUri rdf:type cpd:Death . }
	OPTIONAL { ?resourceUri cpd:date ?date . }
	OPTIONAL { ?resourceUri cpd:periodNote ?periodNote . }	
} ORDER BY ?date';
//OPTIONAL { ?resourceUri cpd:periodPlace ?periodPlace . }
$birthDeath = $this->querylist( $birthDeathQuery, 'local/items/periodOfLife.phtml', array('cpd' => $this->namespaces["cpd"]));

/*
Family: Parents, Siblings, Spouse, Childs
*/
// old explicite queries
/*$parentsQuery = $prefixes . 'SELECT DISTINCT * WHERE {
	<' . $this->resourceUri . '> cpd:hasPeriod ?familyUri .
	?familyUri cpd:familyParent ?resourceUri .
	FILTER NOT EXISTS { ?familyUri cpd:familyParent <' . $this->resourceUri . '> . } }';
*/
/*$siblingsQuery = $prefixes . 'SELECT DISTINCT * WHERE {
	<' . $this->resourceUri . '> cpd:hasPeriod ?familyUri .
	?familyUri cpd:familyChild ?resourceUri .
	FILTER ( ?resourceUri != <' . $this->resourceUri . '> )
	FILTER EXISTS { ?familyUri cpd:familyChild <' . $this->resourceUri . '> . } }';
*/
/*$spouseQuery = $prefixes . 'SELECT DISTINCT * WHERE {
	<' . $this->resourceUri . '> cpd:hasPeriod ?familyUri .
	?familyUri cpd:familyParent ?resourceUri .
	FILTER ( ?resourceUri != <' . $this->resourceUri . '> )
	FILTER EXISTS { ?familyUri cpd:familyParent <' . $this->resourceUri . '> . } }';
*/
/*$childsQuery = $prefixes . 'SELECT DISTINCT * WHERE {
	<' . $this->resourceUri . '> cpd:hasPeriod ?familyUri .
	?familyUri cpd:familyChild ?resourceUri .
	FILTER EXISTS { ?familyUri cpd:familyParent <' . $this->resourceUri . '> . } }';
*/
	// new implicite queries
$parentsQuery = $prefixes . 'SELECT DISTINCT * WHERE { 
	?familyUri rdf:type cpd:Family ;
		cpd:familyChild ?child ;
		cpd:familyParent ?resourceUri .
	FILTER ( ?child = <'.$this->resourceUri.'> ) }';
$siblingsQuery = $prefixes . 'SELECT DISTINCT * WHERE {
	?familyUri rdf:type cpd:Family ;
		cpd:familyChild ?resourceUri ;
		cpd:familyChild <' . $this->resourceUri . '> .
	FILTER ( ?resourceUri != <'.$this->resourceUri.'> ) }';
	//FILTER EXISTS { ?familyUri cpd:familyChild <' . $this->resourceUri . '> } }';
$spouseQuery = $prefixes . 'SELECT DISTINCT * WHERE {
	?familyUri rdf:type cpd:Family ;
		cpd:familyParent ?resourceUri ;
		cpd:familyParent <' . $this->resourceUri . '> .
	FILTER ( ?resourceUri != <'.$this->resourceUri.'> ) }';
	//FILTER EXISTS { ?familyUri cpd:familyParent <' . $this->resourceUri . '> . } }';
$childsQuery = $prefixes . 'SELECT DISTINCT * WHERE { 
	?familyUri rdf:type cpd:Family ;
		cpd:familyChild ?resourceUri ;
		cpd:familyParent ?parent .
	FILTER ( ?parent = <'.$this->resourceUri.'> ) }';

$family = array( 
	"parents" 	=> $this->querylist( $parentsQuery, 'local/items/liplain.phtml', array('mode' => 'parents')),
	"siblings"	=> $this->querylist( $siblingsQuery, 'local/items/liplain.phtml', array('mode' => 'siblings')),
	"spouse" 	=> $this->querylist( $spouseQuery, 'local/items/liplain.phtml', array('mode' => 'spouse')),
	"childs" 	=> $this->querylist( $childsQuery, 'local/items/liplain.phtml', array('mode' => 'childs'))
);
$familyLength = 0;
foreach ($family as $k) { $familyLength += strlen($k); }

/*
Periods of Life ()without Birth,Death,Family
*/
$periodsObjects = array();
$periodsClasses = array( "Study", "GeneralPeriod", "Qualification", "Career", "Office", "Membership", "Honour" );
foreach ($periodsClasses as $periodClass) {
	$periodQuery = $prefixes . 'SELECT *
	WHERE {
		<' . $this->resourceUri . '> cpd:hasPeriod ?resourceUri .
		?resourceUri rdf:type ?classTypeof .
		?resourceUri rdf:type cpd:'.$periodClass.' .
		OPTIONAL { ?resourceUri cpd:periodPlace ?periodPlace . }	
		OPTIONAL { ?resourceUri cpd:date ?date . }
		OPTIONAL { ?resourceUri cpd:from ?from . }
		OPTIONAL { ?resourceUri cpd:to ?to . }
		OPTIONAL { ?resourceUri cpd:periodNote ?periodNote . }
		OPTIONAL { 
			?resourceUri cpd:periodDocument ?periodDocument . 
			OPTIONAL {
				?periodDocument rdfs:label ?periodDocumentLabel .
			}
		}
	} ORDER BY ASC(?date) ASC(?from)';
	$periodObject = $this->querylist($periodQuery, 'local/items/periodOfLife.phtml', array('cpd' => $this->namespaces["cpd"]));
	if ( $periodObject != "" ) {
		$periodsObjects[] = $periodObject;
	}
}
/*
$periodQuery = $prefixes . 'SELECT *
WHERE {
	<' . $this->resourceUri . '> cpd:hasPeriod ?resourceUri .
	?resourceUri rdf:type ?classTypeof .	
	OPTIONAL { ?resourceUri cpd:periodPlace ?periodPlace . }	
	OPTIONAL { ?resourceUri cpd:date ?date . }
	OPTIONAL { ?resourceUri cpd:from ?from . }
	OPTIONAL { ?resourceUri cpd:to ?to . }
	OPTIONAL { ?resourceUri cpd:periodNote ?periodNote . }
	OPTIONAL { 
		?resourceUri cpd:periodDocument ?periodDocument . 
		OPTIONAL {
			?periodDocument rdfs:label ?periodDocumentLabel .
		}
	}
	FILTER ( ?classTypeof != cpd:Birth && ?classTypeof != cpd:Death && ?classTypeof != cpd:Family )
} ORDER BY ?classTypeof ASC(?date) ASC(?from)';
	//FILTER NOT EXISTS {  ?resourceUri rdf:type cpd:Birth . }
	//FILTER NOT EXISTS {  ?resourceUri rdf:type cpd:Death .  }
	//FILTER NOT EXISTS {  ?resourceUri rdf:type cpd:Family .  }
	//OPTIONAL { ?resourceUri cpd:periodBody ?periodBody . }
$periodObject = $this->querylist($periodQuery, 'local/items/periodOfLife.phtml', array('cpd' => $this->namespaces["cpd"]));
*/
?>

<h2 class=""><?php echo $this->title ?></h2>

<?php if ( $forenames != "" ) { ?>
	<p>Vornamen: <?php echo $forenames; ?></p>
<?php } ?>

<?php $denomination = $this->literal(array('property' => $this->namespaces["cpd"] . 'denomination'));
if ( $denomination != "" ) { ?>
	<p>Konfession: <?php echo $denomination; ?></p>
<?php } ?>

<?php $alternativeWritingOfSurname = $this->literal(array('property' => $this->namespaces["cpd"] . 'alternativeWritingOfSurname'));
if ( $alternativeWritingOfSurname != "" ) { ?>
	<p>Namensvariante: <?php echo $alternativeWritingOfSurname; ?></p>
<?php } ?>

<?php if ( $birthDeath != "" ) { ?>
	<div class="period-of-life birthDeath">
		<h3 class="">Lebensdaten</h3>
		<?php echo $birthDeath; ?>
	</div>
<?php } ?>

<?php if ( $familyLength > 0 ) { ?>
	<div class="period-of-life family">
		<h3 class="">Familie</h3>
		<?php // $this->_('family') ?>
		<?php
		echo !empty($family["parents"]) ? "<h4>Eltern</h4>" . $family["parents"] : "";
		echo !empty($family["siblings"]) ? "<h4>Geschwister</h4>" . $family["siblings"] : "";
		echo !empty($family["spouse"]) ? "<h4>Partner</h4>" . $family["spouse"] : "";
		echo !empty($family["childs"]) ? "<h4>Kinder</h4>" . $family["childs"] : "";
		?>
	</div>
<?php } ?>

<?php 
/*
if ( $periodObject != "" ) { ?>
	<div class="period-of-life periods">
		<h3 class="">Lebenslauf</h3>
		<table class="table">
			<?php echo $periodObject; ?>
		</table>
	</div>
<?php } 
*/
?>

<?php
if ( count( $periodsObjects ) > 1 ) { ?>
	<h3 class="">Lebenslauf</h3>
	<?php foreach ($periodsObjects as $key => $periodObject) { ?>
		<div class="period-of-life period">

			<?php $classTypeof = $prefixes . 'SELECT *
			WHERE {

				<http://catalogus-professorum.org/cpd/'.$periodsClasses[$key].'> rdfs:label ?resourceUri .
				FILTER (lang(?resourceUri) = "de")
			}';
			$classTypeof = $this->querylist( $classTypeof, 'local/items/plain.phtml'); ?>

			<h4><?php echo $classTypeof; ?></h4>			
			<table class="table">
				<?php echo $periodObject; ?>
			</table>
		</div>
	<?php 
	}
} ?>

<?php
$furtherProperties = array(
	"Publikationen" => "published",	
	"DNB-Link" => "gnd",
	"Autobiografische Literatur" => "literature",
	"Referenzen und Quellen" => "references",
	"Weblinks" => "webLinks",
	"Weitere Informationen" => "furtherInformation",
	"Anmerkung" => "note",

);

foreach ($furtherProperties as $key => $value) {
	$property = $this->query(array('where' => '<' . $this->resourceUri . '> <' . $this->namespaces["cpd"] . $value.'> ?resourceUri', 'template' => 'liplain'));
	if ( $property != "" ) {
		echo "<h3>".$key."</h3>";
		echo $property;
	}
} ?>